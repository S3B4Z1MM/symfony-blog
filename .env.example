# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.

# Enable BuildKit by default:
#   https://docs.docker.com/develop/develop-images/build_enhancements
export DOCKER_BUILDKIT=1

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=symfony-blog

# In development we want all services to start but in production you don't
# need the asset watchers to run since assets get built into the image.
#
# You can even choose not to run postgres and redis in prod if you plan to use
# managed cloud services. Everything "just works", even optional depends_on!
#export COMPOSE_PROFILES=mariadb,php,nginx
export COMPOSE_PROFILES=mariadb,php,web,adminer

# Which environment is running? These should be "development" or "production".
#export DOCKER_ENV=prod
#export DOCKER_ENV=stage
export DOCKER_ENV=dev

# You'll always want to set MARIADB_USER and MARIADB_PASSWORD since the
# mariadb Docker image uses them for its default database user and password.
export MARIADB_ROOT_USER=root
export MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=yes
export MARIADB_USER=db
export MARIADB_PASSWORD=db
export MARIADB_DATABASE=db

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/up
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change 8000 to be something else.
#
# Use the default in production to avoid having nginx directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
export DOCKER_WEB_PORT_FORWARD=8022

# This is the same as above except for adminer.
#export DOCKER_CABLE_PORT_FORWARD=127.0.0.1:28080
export DOCKER_ADMINER_PORT_FORWARD=8023

# This is the same as above except for mariadb.
#export DOCKER_CABLE_PORT_FORWARD=127.0.0.1:28080
export DOCKER_MARIADB_PORT_FORWARD=3307

# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public:/app/public
export DOCKER_WEB_VOLUME=./app:/var/www/html

# What CPU and memory constraints will be added to your services? When left at
# 0 they will happily use as much as needed.
# export DOCKER_MARIADB_CPUS=0
# export DOCKER_MARIADB_MEMORY=0
# export DOCKER_PHP_CPUS=0
# export DOCKER_PHP_MEMORY=0
# export DOCKER_WEB_CPUS=0
# export DOCKER_WEB_MEMORY=0